package O2::Util::FileGenerator;

use strict;

use O2 qw($context);

#-----------------------------------------------------------------------------
sub new {
  my ($pkg, %init) = @_;
  return bless {}, $pkg;
}
#-----------------------------------------------------------------------------
sub fileExists {
  my ($obj, $file) = @_;
  return $obj->getExistingFilePath($file) ? 1 : 0;
}
#-----------------------------------------------------------------------------
sub getExistingFilePath {
  my ($obj, $file, $root) = @_;
  return $file if -f $file;
  return '' if $file =~ m{ \A / }xms;
  my $o2Root       = $context->getEnv('O2ROOT');
  my $customerRoot = $context->getEnv('O2CUSTOMERROOT');
  return "$customerRoot/var/templates/$file" if -f "$customerRoot/var/templates/$file" && $root ne 'o2';
  return "$o2Root/var/templates/$file"       if -f "$o2Root/var/templates/$file"       && $root ne 'customer';
  return "$customerRoot/$file"               if -f "$customerRoot/$file"               && $root ne 'o2';
  return "$o2Root/$file"                     if -f "$o2Root/$file"                     && $root ne 'customer';
  return '';
}
#-----------------------------------------------------------------------------
sub getNewFilePath {
  my ($obj, $file, $root) = @_;
  return $file if $file =~ m{ \A / }xms;
  
  $root ||= 'customer';
  return $context->getEnv('O2CUSTOMERROOT') . "/var/templates/$file" if $root eq 'customer';
  return $context->getEnv('O2ROOT')         . "/var/templates/$file";
}
#-----------------------------------------------------------------------------
sub writeFile {
  my ($obj, $file, $content, $root) = @_; # $root is either 'o2' or 'customer'
  $root ||= 'customer';

  require Digest::MD5;
  my $fileHash = Digest::MD5::md5_hex($content);

  my $fullPath = $obj->getExistingFilePath($file, $root) || $obj->getNewFilePath($file, $root);
  my ($dir) = $fullPath =~ m{ \A (.*) / [^/]+ \z }xms;
  my $fileMgr = $context->getSingleton('O2::File');
  $fileMgr->mkPath($dir, oct 775) unless -d $dir;
  my ($commentStart, $commentEnd) = $obj->_getCommentStartAndEnd($file);
  $content = "${commentStart}This file was originally auto-generated by O2 with contents hashing to $fileHash${commentEnd}\n$content";
  $fileMgr->writeFile($fullPath, $content);
  return $fullPath;
}
#-----------------------------------------------------------------------------
sub fileIsAutoGenerated {
  my ($obj, $path) = @_;

  my $fileContent = $context->getSingleton('O2::File')->getFile($path);
  my ($commentStart, $commentEnd) = $obj->_getCommentStartAndEnd($path);
  my $fileHash;
  ($fileHash, $fileContent) = $fileContent =~ m{\A\Q$commentStart\EThis (?:file|script) was originally auto-generated by O2 with contents hashing to (\w+)\Q$commentEnd\E\n(.+)}ms;
  
  require Digest::MD5;
  return $fileHash eq Digest::MD5::md5_hex($fileContent);
}
#-----------------------------------------------------------------------------
sub deleteFile {
  my ($obj, $path) = @_;
  $context->getSingleton('O2::File')->rmFile($path);
}
#-----------------------------------------------------------------------------
sub getFileContentWithoutHashLine {
  my ($obj, $path) = @_;
  my $fileContent = $context->getSingleton('O2::File')->getFile($path);
  my ($commentStart, $commentEnd) = $obj->_getCommentStartAndEnd($path);
  my $fileHash;
  ($fileHash, $fileContent) = $fileContent =~ m{\A\Q$commentStart\EThis (?:file|script) was originally auto-generated by O2 with contents hashing to (\w+)\Q$commentEnd\E\n(.+)}ms;
  return ($fileHash, $fileContent);
}
#-----------------------------------------------------------------------------
sub _getCommentStartAndEnd {
  my ($obj, $fileName) = @_;
  my ($commentStart, $commentEnd) = ('# ', '');
  ($commentStart, $commentEnd)    = ('<o2 comment>', '</o2:comment>') if $fileName =~ m{ [.]html \z }xms;
  return ($commentStart, $commentEnd);
}
#-----------------------------------------------------------------------------
1;
