package O2::Model::Target::Test;

use strict;

use base 'O2::Model::Target';

use O2 qw($context);

#-----------------------------------------------------------------------------
sub generate {
  my ($obj, $model) = @_;
  $obj->say("Generate test-script");

  my $testScript = $obj->generateTestScript($model);
  $obj->say($testScript) if $obj->getArg('print');
  my $path = $obj->getTestScriptPath($model);
  $obj->writeFile($path, $testScript);
  if (lc ($obj->ask("Do you want to run the test-script ($path) now (Y/n) ?")) ne 'n') {
    system "perl $path";
  }
}
#-----------------------------------------------------------------------------
sub generateTestScript {
  my ($obj, $model) = @_;
  my $className = $model->getClassName();
  my $mgrClass  = $model->getManagerClassName();
  my $hasMultilingualFields = $model->getMultilingualFields() ? 1 : 0;

  my $script = <<END
use strict;

use Test::More qw(no_plan);
use O2::Script::Test::Common;

use_ok '$mgrClass';

use O2 qw(\$context \$config);

my \@localeCodes = \@{ \$config->get('o2.locales') };
my \$mgr = \$context->getSingleton('$mgrClass');

my \$newObj = \$mgr->newObject();
\$newObj->setMetaName('Test-script for $className/$mgrClass');
END
;

  foreach my $className ($model->getClassNames()) {
    foreach my $field ($model->getFieldsByClassName($className)) {
      next if $field->isMultilingual();
      next if $className ne 'O2::Obj::Object' && $field->isMetaField();
      my $fieldName = $field->getName();
      next if $className eq 'O2::Obj::Object' && ($fieldName eq 'id' || $fieldName eq 'metaClassName' || $fieldName eq 'metaCreateTime' || $fieldName eq 'metaChangeTime');
      my $value = $obj->_getTestValue($field);
      $script .= '$newObj->' . $field->getSetAccessor() . "($value);\n";
    }
  }
  if ($hasMultilingualFields) {
    $script .= "
foreach my \$localeCode (\@localeCodes) {
  \$newObj->setCurrentLocale(\$localeCode);\n";
    foreach my $field ($model->getMultilingualFields()) {
      next if $field->isMetaField();
      my $value = $obj->_getTestValue($field, '$localeCode');
      $script .= "  \$newObj->" . $field->getSetAccessor() . "($value);\n";
    }
    $script .= "}\n";
  }

  $script .= <<END
\$newObj->save();

ok(\$newObj->getId() > 0, 'Object saved ok');

my \$dbObj = \$context->getObjectById( \$newObj->getId() );
ok(\$dbObj, 'getObjectById returned something') or BAIL_OUT("Couldn't get object from database");

END
  ;

  foreach my $className ($model->getClassNames()) {
    foreach my $field ($model->getFieldsByClassName($className)) {
      next if $field->isMultilingual();
      next if $className ne 'O2::Obj::Object' && $field->isMetaField();
      $script .= $obj->_getCodeToTestField($field, $model);
    }
  }
  if ($hasMultilingualFields) {
    $script .= "foreach my \$localeCode (\@localeCodes) {\n";
    $script .= "  \$newObj->setCurrentLocale(\$localeCode);\n";
    $script .= "  \$dbObj->setCurrentLocale(\$localeCode);\n";
    foreach my $field ($model->getMultilingualFields()) {
      next if $field->isMetaField();
      $script .= '  ' . $obj->_getCodeToTestField($field, $model);
    }
    $script .= "}\n";
  }

  $script .= "\n# See if a simple object search works\n";
  $script .= "my \@searchResults = \$mgr->objectSearch( objectId => \$newObj->getId() );\n";
  $script .= "is(\$searchResults[0]->getId(), \$newObj->getId(), 'Search for objectId ok');\n\n";

  $script .= <<END
END {
  \$newObj->deletePermanently() if \$newObj;
  deleteTestObjects();
}
END
  ;
  return $script;
}
#-----------------------------------------------------------------------------
sub writeFile {
  my ($obj, $path, $contentWithoutHash) = @_;
  my $fileGenerator = $context->getSingleton('O2::Util::FileGenerator');

  if (-e $path  &&  $contentWithoutHash eq $fileGenerator->getFileContentWithoutHashLine($path)) {
    return $obj->say("No changes need to be made");
  }

  if ( !-e $path  ||  $fileGenerator->fileIsAutoGenerated($path)  ||  lc ($obj->ask("File $path exists, overwrite? (y/N)")) eq 'y' ) {
    $fileGenerator->writeFile($path, $contentWithoutHash);
    $obj->say("Wrote $path");
  }
}
#-----------------------------------------------------------------------------
sub getTestScriptPath {
  my ($obj, $model) = @_;
  my $fileName =  $model->getClassName();
  $fileName    =~ s{::}{/}xmsg;
  return $obj->getArg('currentRoot') . "/t/$fileName.t";
}
#-----------------------------------------------------------------------------
sub _getTestValue {
  my ($obj, $field, $extraValue) = @_;
  my $value = $field->getTestValue();
  return $value if $value;
  
  my $type = $field->getType();
  if ($field->getListType() eq 'hash') {
    my %hash = ( a => 1,     b => 2     );
    %hash    = ( a => 'one', b => 'two' ) if $type eq 'varchar' || $field->isTextType();
    my $string;
    foreach my $key (keys %hash) {
      $hash{$key} = $hash{$key} . " ($extraValue)" if $extraValue;
      $string    .= "'$key' => '$hash{$key}', ";
    }
    return $string;
  }
  elsif ($field->getListType() eq 'array') {
    my @strings = (1, 2);
    @strings    = (' getTestObjectId()', 'getTestObjectId() ') if $field->isObjectType();
    return join ', ', @strings if $type ne 'varchar' && !$field->isTextType();
    @strings = qw(one two);
    if ($extraValue) {
      foreach my $i (0 .. scalar(@strings)-1) {
        $strings[$i] = $strings[$i] . " ($extraValue)";
      }
    }
    return '"' . join ('", "', @strings) . '"';
  }
  else {
    $value = '';
    my @validValues = $field->getValidValues();
    if (@validValues) {
      my $value = $validValues[0];
      $value    = "'$value'" if $field->isTextType() || $type =~ m{ \A varchar }xms || $type =~ m{ \A char }xms;
      return $value;
    }
    if ($field->isTextType()) {
      $value  = 'Test-text';
      $value .= " ($extraValue)" if $extraValue;
      return qq{"$value"};
    }
    if ($type =~ m{ \A varchar }xms) {
      $value  = 'Test-varchar';
      $value  = substr $value, 0, $field->getLength() if $field->getLength() && $field->getLength() < length $value;
      $value .= " ($extraValue)" if $extraValue;
      return qq{"$value"};
    }
    if ($type =~ m{ \A char }xms) {
      my $size = $field->getLength();
      return "'" . ('a' x $size) . "'";
    }
    return      1 if $type eq 'int' || $type eq 'bit' || $type eq 'tinyint';
    return    1.1 if $field->isFloatingPointType();
    return 'time' if $type eq 'epoch';
    return ' getTestObjectId() ' if $field->isObjectType();
    return " \$context->getDateFormatter()->dateFormat(time, 'yyyy-MM-dd HH:mm:ss') " if $type eq 'date';
    die "Unknown field type $type";
  }
}
#-----------------------------------------------------------------------------
sub _getCodeToTestField {
  my ($obj, $field, $model) = @_;
  my $script = '';
  my $testTitle = $obj->_getTestTitle($field);
  my $getter = $field->getGetAccessor();
  if ($field->getListType() eq 'array') {
    if ($field->isObjectType() && $getter !~ m{ Ids \z }xms) {
      $getter = $context->getSingleton('O2::Mgr::ObjectManager')->_appendIds($getter);
    }
    $script .= "is_deeply( [ \$dbObj->$getter() ], [ \$newObj->$getter() ], $testTitle );\n";
  }
  elsif ($field->getListType() eq 'hash') {
    $script .= "is_deeply( { \$dbObj->$getter() }, { \$newObj->$getter() }, $testTitle );\n";
  }
  elsif ($field->getType() eq 'date') {
    $script .= "is( \$dbObj->$getter()->format('yyyy-MM-dd HH:mm:ss'), \$newObj->$getter()->format('yyyy-MM-dd HH:mm:ss'), $testTitle );\n";
  }
  elsif ($field->isFloatingPointType()) {
    $script .= "cmp_ok( \$dbObj->$getter(), '==', \$newObj->$getter(), $testTitle );\n";
  }
  elsif ($field->isObjectType() && $getter !~ m{ Id \z }xms) {
    $getter .= 'Id';
    $script .= "is( \$dbObj->$getter(), \$newObj->$getter(), $testTitle );\n";
  }
  else {
    $script .= "is( \$dbObj->$getter(), \$newObj->$getter(), $testTitle );\n";
  }
  return $script;
}
#-----------------------------------------------------------------------------
sub _getTestTitle {
  my ($obj, $field) = @_;
  return "'" . $field->getName() . " retrieved ok.'";
}
#-----------------------------------------------------------------------------
1;
