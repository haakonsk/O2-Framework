# This file was originally auto-generated by O2 with contents hashing to 491a8d40587adef9601fdee197164f69
use strict;

use Test::More qw(no_plan);
use O2::Script::Test::Common;

use_ok 'O2::Mgr::PropertyDefinitionManager';

use O2 qw($context $config);

my @localeCodes = @{ $config->get('o2.locales') };
my $mgr = $context->getSingleton('O2::Mgr::PropertyDefinitionManager');

my $newObj = $mgr->newObject();
$newObj->setMetaName('Test-script for O2::Obj::PropertyDefinition/O2::Mgr::PropertyDefinitionManager');
$newObj->setMetaStatus("Test-varchar");
$newObj->setMetaParentId( getTestObjectId() );
$newObj->setKeywordIds( getTestObjectId(), getTestObjectId() );
$newObj->setMetaOwnerId( getTestObjectId() );
$newObj->setMetaName("Test-varchar");
$newObj->setRuleErrorMessage("Test-varchar");
$newObj->setRule("Test-varchar");
$newObj->setApplyToClasses("one", "two");
$newObj->setPropertyName("Test-varchar");
$newObj->setInputType("Test-varchar");
$newObj->setOptionsType("Test-varchar");
$newObj->setDescription("Test-text");
$newObj->setOptionsData("Test-text");
$newObj->save();

ok($newObj->getId() > 0, 'Object saved ok');

my $dbObj = $context->getObjectById( $newObj->getId() );
ok($dbObj, 'getObjectById returned something') or BAIL_OUT("Couldn't get object from database");

is( $dbObj->getMetaClassName(), $newObj->getMetaClassName(), 'metaClassName retrieved ok.' );
is( $dbObj->getMetaStatus(), $newObj->getMetaStatus(), 'metaStatus retrieved ok.' );
is( $dbObj->getMetaParentId(), $newObj->getMetaParentId(), 'metaParentId retrieved ok.' );
is_deeply( [ $dbObj->getKeywordIds() ], [ $newObj->getKeywordIds() ], 'keywordIds retrieved ok.' );
is( $dbObj->getMetaCreateTime(), $newObj->getMetaCreateTime(), 'metaCreateTime retrieved ok.' );
is( $dbObj->getId(), $newObj->getId(), 'id retrieved ok.' );
is( $dbObj->getMetaChangeTime(), $newObj->getMetaChangeTime(), 'metaChangeTime retrieved ok.' );
is( $dbObj->getMetaOwnerId(), $newObj->getMetaOwnerId(), 'metaOwnerId retrieved ok.' );
is( $dbObj->getMetaName(), $newObj->getMetaName(), 'metaName retrieved ok.' );
is( $dbObj->getRuleErrorMessage(), $newObj->getRuleErrorMessage(), 'ruleErrorMessage retrieved ok.' );
is( $dbObj->getRule(), $newObj->getRule(), 'rule retrieved ok.' );
is_deeply( [ $dbObj->getApplyToClasses() ], [ $newObj->getApplyToClasses() ], 'applyToClasses retrieved ok.' );
is( $dbObj->getPropertyName(), $newObj->getPropertyName(), 'propertyName retrieved ok.' );
is( $dbObj->getInputType(), $newObj->getInputType(), 'inputType retrieved ok.' );
is( $dbObj->getOptionsType(), $newObj->getOptionsType(), 'optionsType retrieved ok.' );
is( $dbObj->getDescription(), $newObj->getDescription(), 'description retrieved ok.' );
is( $dbObj->getOptionsData(), $newObj->getOptionsData(), 'optionsData retrieved ok.' );

# See if a simple object search works
my @searchResults = $mgr->objectSearch( objectId => $newObj->getId() );
is($searchResults[0]->getId(), $newObj->getId(), 'Search for objectId ok');

END {
  $newObj->deletePermanently() if $newObj;
  deleteTestObjects();
}
